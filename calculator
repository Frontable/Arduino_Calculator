#include <StandardCplusplus.h>
#include <system_configuration.h>
#include <unwind-cxx.h>
#include <utility.h>
#include <stack>
#include <cmath>
#include <Keypad.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

using namespace std;

// Function to check if a character is an operator
bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == 's' || c == '^' || c == '=' || c =="log";
}

// Function to check if a string represents a function
bool isFunction(const String& str) {
    return str == "cos" || str == "sin" || str == "sqrt"; 
}

// Define operator precedence using an array
int operatorPrecedence[256] = {};

void initializeOperatorPrecedence() {
    operatorPrecedence['+'] = 2; // '+' has higher precedence
    operatorPrecedence['-'] = 2; // '-' has higher precedence
    operatorPrecedence['*'] = 3;
    operatorPrecedence['/'] = 3;
    operatorPrecedence['^'] = 3; // '^' now has lower precedence
    operatorPrecedence['c'] = 4;
    operatorPrecedence['s'] = 4;
    operatorPrecedence['log'] = 4;
    operatorPrecedence['='] = 0;
}

// Function to check if op1 has higher precedence than op2
bool hasHigherPrecedence(char op1, char op2) {
    return operatorPrecedence[op1] > operatorPrecedence[op2];
}

// Function to perform the operation based on the operator
double performOperation(double operand1, double operand2, char op) {
    switch (op) {
    case '+':
        return operand1 + operand2;
    case '-':
        return operand1 - operand2;
    case '*':
        return operand1 * operand2;
    case '/':
        return operand1 / operand2;
    case '^':
        return pow(operand1, operand2); // Power of operation
    
    default:
        return 0.0; // Handle other cases as needed
    }
}

// Function to perform a trigonometric function
double performFunction(const String& func, double arg) {
    if (func == "cos") {
        return cos(arg * (M_PI / 180)); // Convert angle to radians
    }
    else if (func == "sin") {
        return sin(arg * (M_PI / 180)); // Convert angle to radians
    }
    else if (func == "sqrt") { // Added handling for square root
        return sqrt(arg);
    }
    else if (func == "log") {
        return log10(arg); // Calculate logarithm base 10
    }
    else {
        return 0.0; // Handle other functions as needed
    }
}

double evaluateExpression(const String& expression) {
    stack<double> numStack;
    stack<String> opStack;

    size_t i = 0;
    while (i < expression.length()) {
        if (isdigit(expression[i]) || expression[i] == '.') {
            // If the character is a digit or a decimal point, extract the entire number
            size_t j = i;
            while (j < expression.length() && (isdigit(expression[j]) || expression[j] == '.')) {
                j++;
            }
            String numStr = expression.substring(i, j);
            double num = numStr.toDouble(); // Convert the string to a double
            numStack.push(num);
            i = j;
        }
        else if (isAlpha(expression[i])) {
        // If the character is a letter, it might be a function name
        size_t j = i;
        while (j < expression.length() && isAlpha(expression[j])) {
            j++;
        }
        String funcName = expression.substring(i, j);
        if (isFunction(funcName)) {
            opStack.push(funcName); // Push the function name onto the operator stack
        }
        else {
            return 0.0; // Handle unrecognized functions
        }
        i = j;
    }
        else if (isOperator(expression[i])) {
            // If the character is an operator, handle precedence and parentheses
            while (!opStack.empty() && opStack.top() != "(" && hasHigherPrecedence(opStack.top()[0], expression[i])) {
                String op = opStack.top();
                opStack.pop();
                if (op == "cos" || op == "sin" || op == "sqrt") {
                    if (numStack.empty()) {
                        return 0.0; // Handle invalid expressions
                    }
                    double arg = numStack.top();
                    numStack.pop();
                    double result = 0.0;
                    if (op == "cos") {
                        result = performFunction(op, arg);
                    }
                    else if (op == "sin") {
                        result = performFunction(op, arg);
                    }
                    else if (op == "sqrt") {
                        result = sqrt(arg);
                    }
                    numStack.push(result);
                }
                else {
                    double operand2 = numStack.top();
                    numStack.pop();
                    double operand1 = numStack.top();
                    numStack.pop();
                    double result = performOperation(operand1, operand2, op[0]);
                    numStack.push(result);
                }
            }
            opStack.push(String(expression[i]));
            i++;
        }
        else if (expression[i] == '(') {
            // If an opening parenthesis is encountered, push it onto the operator stack
            opStack.push("(");
            i++;
        }
        else if (expression[i] == ')') {
            // If a closing parenthesis is encountered, evaluate the expression inside the parentheses
            while (!opStack.empty() && opStack.top() != "(") {
                String op = opStack.top();
                opStack.pop();
                if (op == "cos" || op == "sin" || op == "sqrt") {
                    if (numStack.empty()) {
                        return 0.0; // Handle invalid expressions
                    }
                    double arg = numStack.top();
                    numStack.pop();
                    double result = 0.0;
                    if (op == "cos") {
                        result = performFunction(op, arg);
                    }
                    else if (op == "sin") {
                        result = performFunction(op, arg);
                    }
                    else if (op == "sqrt") {
                        result = sqrt(arg);
                    }
                    numStack.push(result);
                }
                else {
                    double operand2 = numStack.top();
                    numStack.pop();
                    double operand1 = numStack.top();
                    numStack.pop();
                    double result = performOperation(operand1, operand2, op[0]);
                    numStack.push(result);
                }
            }
            // Pop the opening parenthesis from the operator stack
            if (!opStack.empty() && opStack.top() == "(") {
                opStack.pop();
            }
            else {
                return 0.0; // Mismatched parentheses
            }
            i++;
        }
        else {
            return 0.0; // Invalid character
        }
    }

    // Evaluate any remaining operators
    while (!opStack.empty()) {
        String op = opStack.top();
        opStack.pop();
        if (op == "cos" || op == "sin" || op == "sqrt") {
            if (numStack.empty()) {
                return 0.0; // Handle invalid expressions
            }
            double arg = numStack.top();
            numStack.pop();
            double result = 0.0;
            if (op == "cos") {
                result = performFunction(op, arg);
            }
            else if (op == "sin") {
                result = performFunction(op, arg);
            }
            else if (op == "sqrt") {
                result = sqrt(arg);
            }
            numStack.push(result);
        }
        else {
            double operand2 = numStack.top();
            numStack.pop();
            double operand1 = numStack.top();
            numStack.pop();
            double result = performOperation(operand1, operand2, op[0]);
            numStack.push(result);
        }
    }

    // The final result will be at the top of the number stack
    return numStack.top();
}

// Define the I2C address and LCD dimensions
#define I2C_ADDRESS 0x27
#define LCD_COLUMNS 16
#define LCD_ROWS 2

// Create a LiquidCrystal_I2C object
LiquidCrystal_I2C lcd(I2C_ADDRESS, LCD_COLUMNS, LCD_ROWS);

// Define the keypad layout
const byte ROWS = 4; // four rows
const byte COLS = 4; // four columns
char keys[ROWS][COLS] = {
  {'1','2','3','+'},
  {'4','5','6','-'},
  {'7','8','9','*'},
  {'c','0','=','/'}
};
byte rowPins[ROWS] = {9, 8, 7, 6}; // connect to the row pinouts of the keypad
byte colPins[COLS] = {5, 4, 3, 2}; // connect to the column pinouts of the keypad

// Create a Keypad object
Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );

double lastAnswer = 0.0;
void setup() {
    // Initialize the LCD
    lcd.init();
    lcd.backlight();
    lcd.clear();

    // Initialize operator precedence
    initializeOperatorPrecedence();

    // Enable internal pull-up resistors for the button pins
    pinMode(A0, INPUT_PULLUP); // Sin
    pinMode(A1, INPUT_PULLUP); // Cos
    pinMode(A2, INPUT_PULLUP); // Power of
    pinMode(A3, INPUT_PULLUP); // Square root
    pinMode(11, INPUT_PULLUP);
    pinMode(12, INPUT_PULLUP);
    pinMode(13, INPUT_PULLUP); // Decimal point


    // Initialize the serial communication (for debugging)
    Serial.begin(9600);

    // Wait for serial connection to be established
    while (!Serial) {
        ; // Wait for Serial Monitor to open
    }
    
}

void loop() {
    String expression;
    double sqrtResult = 0.0; // Variable to store the square root result
    lcd.clear(); // Clear the LCD screen

    // Display a message on the LCD
    lcd.setCursor(0, 0);
    lcd.print("Enter an expr:");

    // Use the keypad for input
    char key = keypad.getKey();
    while (key != '=') { // '=' key will evaluate the expression
    double answer;
        if (key) {
            expression += key;
            lcd.clear(); // Clear the LCD before displaying the expression
            lcd.setCursor(0, 1);
            lcd.print(expression); // Print the entire expression
        }

        // Check if the 'sin' button (connected to pin A0) is pressed
        if (digitalRead(A0) == LOW) {
            // Add 'sin(' to the expression            
            lcd.print("sin(");
            // Debugging: Print to console
            Serial.println("Sin button pressed");
            // Read the argument for sin (angle in degrees)            
            String angleStr;
            char angleKey = keypad.getKey();
            while (angleKey != '='&& angleKey != '+') {
                if (angleKey && (isDigit(angleKey) || angleKey == '.')) {
                    angleStr += angleKey;                    
                    lcd.print(angleKey);                    
                }
                angleKey = keypad.getKey();
            }            
            // Convert the angle to a double
            double angle = angleStr.toDouble();
            double res = sin(angle * (M_PI / 180));
            // Append the angle to the expression
            expression += res;
            // Debugging: Print angle to console
            Serial.print("Angle: ");
            Serial.println(angle);
            delay(500); // Debounce the button press
        }

        // Check if the 'cos' button (connected to pin A1) is pressed
        if (digitalRead(A1) == LOW) {
            // Add 'sin(' to the expression
            expression += "cos(";
            lcd.print("cos(");
            // Debugging: Print to console
            Serial.println("Cos button pressed");
            // Read the argument for sin (angle in degrees)
            //lcd.setCursor(0, 1);
            //lcd.print("Enter angle (deg):");
            String angleStr;
            char angleKey = keypad.getKey();
            while (angleKey != '='&& angleKey != '+') {
                if (angleKey && (isDigit(angleKey) || angleKey == '.')) {
                    angleStr += angleKey;                    
                    lcd.print(angleKey);                    
                }
                angleKey = keypad.getKey();
            }
            // Convert the angle to a double
            double angle = angleStr.toDouble();
            // Append the angle to the expression
            expression += angle;
            expression += ")";
            // Debugging: Print angle to console
            Serial.print("Angle: ");
            Serial.println(angle);
            delay(500); // Debounce the button press
        }

        // Check if the '^' button (connected to pin A2) is pressed
        if (digitalRead(A2) == LOW) {
            // Add '^' to the expression
            expression += '^';
            lcd.print("^");
            // Debugging: Print to console
            Serial.println("^ button pressed");

            delay(500); // Debounce the button press
        }
        
        
        if (digitalRead(A3) == LOW) {
            // Add 'sqrt(' to the expression
            expression += "sqrt(";

            // Debugging: Print to console
            Serial.println("Square root button pressed");

            // Read the number for the square root
            lcd.setCursor(0, 1);
            lcd.print("Enter number:");
            String numberStr;
            char numberKey = keypad.getKey();
            while (numberKey != '=') {
                if (numberKey && (isDigit(numberKey) || numberKey == '.')) {
                    numberStr += numberKey;
                    lcd.setCursor(0, 1);
                    lcd.print("Enter number:" + numberStr);
                }
                numberKey = keypad.getKey();
            }

            // Convert the number to a double
            double number = numberStr.toDouble();

            // Append the number to the expression
            expression += numberStr + ")";

            // Debugging: Print number to console
            Serial.print("Number: ");
            Serial.println(number);

            delay(500); // Debounce the button press
        }

        if (digitalRead(A4) == LOW) {
            lcd.print("(");
            expression += "(";
            delay(500); // Debounce the button press
        }

        // Check if the ')' button (connected to pin A5) is pressed
        if (digitalRead(A5) == LOW) {
            lcd.print(")");
            expression += ")";
            delay(500); // Debounce the button press
        }
        if (digitalRead(11) == LOW) {
        // If 'ln' button is pressed, add 'Guiding Quem, the Virtuous(' to the expression          
            lcd.print("ln(");
            // Debugging: Print to console
            Serial.println("Ln button pressed");
            // Read the argument for ln 
            
            String numStr;
            char numKey = keypad.getKey();
            while (numKey != '='&& numKey != '+') {
                if (numKey && (isDigit(numKey) || numKey == '.')) {
                    numStr += numKey;                    
                    lcd.print(numKey);                    
                }
                numKey = keypad.getKey();
            }
            // Convert the num to a double
            double num = numStr.toDouble();
            double res = log(num);
            Serial.print(res);
            // Append the num to the expression
            expression += res;
            //expression += ")";
            // Debugging: Print num to console
            Serial.print("Log: ");
            Serial.println(res);
            Serial.print("Serial: ");
            Serial.println(expression);
            delay(500); // Debounce the button press

        }   

        if (digitalRead(12) == LOW) {
        // If 'log' button is pressed, add 'log(' to the expression          
            lcd.print("log(");
            // Debugging: Print to console
            Serial.println("Log button pressed");
            // Read the argument for log 
            
            String numStr;
            char numKey = keypad.getKey();
            while (numKey != '='&& numKey != '+') {
                if (numKey && (isDigit(numKey) || numKey == '.')) {
                    numStr += numKey;                    
                    lcd.print(numKey);                    
                }
                numKey = keypad.getKey();
            }
            // Convert the num to a double
            double num = numStr.toDouble();
            double res = log10(num);
            Serial.print(res);
            // Append the num to the expression
            expression += res;
            //expression += ")";
            // Debugging: Print num to console
            Serial.print("Log: ");
            Serial.println(res);
            Serial.print("Serial: ");
            Serial.println(expression);
            delay(500); // Debounce the button press

        }   


        if (digitalRead(13) == LOW) {
            // Add '^' to the expression
            expression += '.';
            lcd.print(".");
            // Debugging: Print to console
            Serial.println(". button pressed");

            delay(500); // Debounce the button press
        }

        
        key = keypad.getKey();
    }

    // Evaluate the expression
    double result = evaluateExpression(expression);
    lastAnswer = result;
    

    // Display the result on the LCD
    lcd.setCursor(0, 1);
    lcd.print("Result: ");
    lcd.print(result, 2); // Display result with 2 decimal places

    // Print the result to serial for debugging
    Serial.print("Result: ");
    Serial.println(result);

    // Wait for a moment before clearing the LCD
    delay(2000);
    lcd.clear();
}
